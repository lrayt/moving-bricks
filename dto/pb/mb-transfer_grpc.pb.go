// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: mb-transfer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MovingBricks_Ping_FullMethodName     = "/pb.MovingBricks/Ping"
	MovingBricks_List_FullMethodName     = "/pb.MovingBricks/List"
	MovingBricks_Transfer_FullMethodName = "/pb.MovingBricks/Transfer"
)

// MovingBricksClient is the client API for MovingBricks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovingBricksClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Transfer(ctx context.Context, opts ...grpc.CallOption) (MovingBricks_TransferClient, error)
}

type movingBricksClient struct {
	cc grpc.ClientConnInterface
}

func NewMovingBricksClient(cc grpc.ClientConnInterface) MovingBricksClient {
	return &movingBricksClient{cc}
}

func (c *movingBricksClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, MovingBricks_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movingBricksClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, MovingBricks_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movingBricksClient) Transfer(ctx context.Context, opts ...grpc.CallOption) (MovingBricks_TransferClient, error) {
	stream, err := c.cc.NewStream(ctx, &MovingBricks_ServiceDesc.Streams[0], MovingBricks_Transfer_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &movingBricksTransferClient{stream}
	return x, nil
}

type MovingBricks_TransferClient interface {
	Send(*TransferChunk) error
	Recv() (*TransferChunk, error)
	grpc.ClientStream
}

type movingBricksTransferClient struct {
	grpc.ClientStream
}

func (x *movingBricksTransferClient) Send(m *TransferChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *movingBricksTransferClient) Recv() (*TransferChunk, error) {
	m := new(TransferChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MovingBricksServer is the server API for MovingBricks service.
// All implementations must embed UnimplementedMovingBricksServer
// for forward compatibility
type MovingBricksServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	Transfer(MovingBricks_TransferServer) error
	mustEmbedUnimplementedMovingBricksServer()
}

// UnimplementedMovingBricksServer must be embedded to have forward compatible implementations.
type UnimplementedMovingBricksServer struct {
}

func (UnimplementedMovingBricksServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMovingBricksServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMovingBricksServer) Transfer(MovingBricks_TransferServer) error {
	return status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedMovingBricksServer) mustEmbedUnimplementedMovingBricksServer() {}

// UnsafeMovingBricksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovingBricksServer will
// result in compilation errors.
type UnsafeMovingBricksServer interface {
	mustEmbedUnimplementedMovingBricksServer()
}

func RegisterMovingBricksServer(s grpc.ServiceRegistrar, srv MovingBricksServer) {
	s.RegisterService(&MovingBricks_ServiceDesc, srv)
}

func _MovingBricks_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovingBricksServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovingBricks_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovingBricksServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovingBricks_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovingBricksServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovingBricks_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovingBricksServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovingBricks_Transfer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MovingBricksServer).Transfer(&movingBricksTransferServer{stream})
}

type MovingBricks_TransferServer interface {
	Send(*TransferChunk) error
	Recv() (*TransferChunk, error)
	grpc.ServerStream
}

type movingBricksTransferServer struct {
	grpc.ServerStream
}

func (x *movingBricksTransferServer) Send(m *TransferChunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *movingBricksTransferServer) Recv() (*TransferChunk, error) {
	m := new(TransferChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MovingBricks_ServiceDesc is the grpc.ServiceDesc for MovingBricks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovingBricks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MovingBricks",
	HandlerType: (*MovingBricksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _MovingBricks_Ping_Handler,
		},
		{
			MethodName: "List",
			Handler:    _MovingBricks_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transfer",
			Handler:       _MovingBricks_Transfer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mb-transfer.proto",
}
